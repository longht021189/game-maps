/* automatically generated by rust-bindgen 0.71.1 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct curl_slist {
    _unused: [u8; 0],
}
pub type Header = curl_slist;
pub const RequestMethod_REQUEST_METHOD_GET: RequestMethod = 0;
pub const RequestMethod_REQUEST_METHOD_POST: RequestMethod = 1;
pub const RequestMethod_REQUEST_METHOD_PUT: RequestMethod = 2;
pub const RequestMethod_REQUEST_METHOD_DELETE: RequestMethod = 3;
pub type RequestMethod = ::std::os::raw::c_int;
pub const RequestContentType_REQUEST_CONTENT_TYPE_JSON: RequestContentType = 0;
pub type RequestContentType = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Request {
    pub url: *const ::std::os::raw::c_char,
    pub method: RequestMethod,
    pub content_type: RequestContentType,
    pub content: *const ::std::os::raw::c_char,
    pub headers: *mut Header,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Request"][::std::mem::size_of::<Request>() - 32usize];
    ["Alignment of Request"][::std::mem::align_of::<Request>() - 8usize];
    ["Offset of field: Request::url"][::std::mem::offset_of!(Request, url) - 0usize];
    ["Offset of field: Request::method"][::std::mem::offset_of!(Request, method) - 8usize];
    ["Offset of field: Request::content_type"]
        [::std::mem::offset_of!(Request, content_type) - 12usize];
    ["Offset of field: Request::content"][::std::mem::offset_of!(Request, content) - 16usize];
    ["Offset of field: Request::headers"][::std::mem::offset_of!(Request, headers) - 24usize];
};
pub const ResponseStatus_Code_200_Success: ResponseStatus = 200;
pub const ResponseStatus_Code_204_NoContent: ResponseStatus = 204;
pub const ResponseStatus_Code_404_NotFound: ResponseStatus = 404;
pub const ResponseStatus_Code_405_MethodNotAllowed: ResponseStatus = 405;
pub type ResponseStatus = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Response {
    pub status: ResponseStatus,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Response"][::std::mem::size_of::<Response>() - 4usize];
    ["Alignment of Response"][::std::mem::align_of::<Response>() - 4usize];
    ["Offset of field: Response::status"][::std::mem::offset_of!(Response, status) - 0usize];
};
unsafe extern "C" {
    pub fn add_header(request: *mut Request, value: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn free_headers(request: *mut Request);
}
unsafe extern "C" {
    pub fn fetch(request: *mut Request) -> *mut Response;
}
unsafe extern "C" {
    pub fn free_response(response: *mut Response);
}
